; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32215.0 

	TITLE	C:\Users\86134\OneDrive\桌面\c代码注入器\bin\temp.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_EPI
PUBLIC	_kernel32
PUBLIC	_GetproAdd
PUBLIC	_LoadLib
PUBLIC	_VirtualAlloc
PUBLIC	_VirtualFree
PUBLIC	_OpenProcess
PUBLIC	_CloseHandle
PUBLIC	_CreateRemoteThread
PUBLIC	_WaitForSingleObject
_DATA	SEGMENT
_EPI	DD	01H
_kernel32 DD	01H
_GetproAdd DD	01H
_LoadLib DD	01H
_VirtualAlloc DD 01H
_VirtualFree DD	01H
_OpenProcess DD	01H
_CloseHandle DD	01H
_CreateRemoteThread DD 01H
_WaitForSingleObject DD 01H
_DATA	ENDS
PUBLIC	_malloc_
PUBLIC	_free_
PUBLIC	_memzero
PUBLIC	_strlen
PUBLIC	_memcpy
PUBLIC	_intToStr
PUBLIC	_unsignedIntToStr
PUBLIC	_floatToStr
PUBLIC	_decimalToHexadecimal
PUBLIC	_strcmp
PUBLIC	_callEPrintFunc
PUBLIC	_EPrintString
PUBLIC	_prin
PUBLIC	_sprintf
PUBLIC	_Printf
PUBLIC	_GetKernel32
PUBLIC	_GetProcAddressCustom
PUBLIC	_GetfunctionAddress
PUBLIC	_initFuncAdd
PUBLIC	_main
PUBLIC	__real@41200000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
_DATA	SEGMENT
$SG7780	DB	'0123456789ABCDEF', 00H
	ORG $+3
$SG7962	DB	'GetProcAddress', 00H
	ORG $+1
$SG7964	DB	'LoadLibraryA', 00H
	ORG $+3
$SG7967	DB	'VirtualAlloc', 00H
	ORG $+3
$SG7968	DB	'VirtualFree', 00H
$SG7969	DB	'OpenProcess', 00H
$SG7970	DB	'CloseHandle', 00H
$SG7971	DB	'CreateRemoteThread', 00H
	ORG $+1
$SG7972	DB	'WaitForSingleObject', 00H
$SG7975	DB	0c9H, 0eaH, 0c7H, 0ebH, 0b5H, 0c4H, 0bfH, 0d5H, 0bcH, 0e4H
	DB	0caH, 0cdH, 0b7H, 0c5H, 0b3H, 0c9H, 0b9H, 0a6H, 00H
	ORG $+1
$SG7976	DB	0b1H, 0c8H, 0c8H, 0e7H, 0d5H, 0e2H, 0b8H, 0f6H, 0bfH, 0c9H
	DB	0d2H, 0d4H, 0d6H, 0b1H, 0bdH, 0d3H, 0caH, 0e4H, 0b3H, 0f6H, 0d2H
	DB	0bbH, 0b6H, 0ceH, 0bbH, 0b0H, 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_main	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\temp.c
; Line 4
	push	ebp
	mov	ebp, esp
; Line 5
	call	_initFuncAdd
; Line 60
	push	OFFSET $SG7975
	call	_EPrintString
	add	esp, 4
; Line 61
	push	OFFSET $SG7976
	call	_EPrintString
	add	esp, 4
; Line 72
	xor	eax, eax
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_initFuncAdd PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 678
	push	ebp
	mov	ebp, esp
; Line 679
	cmp	DWORD PTR _kernel32, 1
	jne	SHORT $LN2@initFuncAd
; Line 680
	call	_GetKernel32
	mov	DWORD PTR _kernel32, eax
$LN2@initFuncAd:
; Line 682
	cmp	DWORD PTR _GetproAdd, 1
	jne	SHORT $LN3@initFuncAd
; Line 683
	push	OFFSET $SG7962
	mov	eax, DWORD PTR _kernel32
	push	eax
	call	_GetProcAddressCustom
	add	esp, 8
	mov	DWORD PTR _GetproAdd, eax
$LN3@initFuncAd:
; Line 685
	cmp	DWORD PTR _LoadLib, 1
	jne	SHORT $LN4@initFuncAd
; Line 686
	push	OFFSET $SG7964
	mov	ecx, DWORD PTR _kernel32
	push	ecx
	call	_GetProcAddressCustom
	add	esp, 8
	mov	DWORD PTR _LoadLib, eax
$LN4@initFuncAd:
; Line 688
	cmp	DWORD PTR _kernel32, 0
	je	SHORT $LN6@initFuncAd
	cmp	DWORD PTR _GetproAdd, 0
	je	SHORT $LN6@initFuncAd
	cmp	DWORD PTR _LoadLib, 0
	jne	SHORT $LN5@initFuncAd
$LN6@initFuncAd:
; Line 689
	xor	eax, eax
	jmp	$LN1@initFuncAd
$LN5@initFuncAd:
; Line 691
	push	OFFSET $SG7967
	mov	edx, DWORD PTR _kernel32
	push	edx
	call	DWORD PTR _GetproAdd
	mov	DWORD PTR _VirtualAlloc, eax
; Line 692
	push	OFFSET $SG7968
	mov	eax, DWORD PTR _kernel32
	push	eax
	call	DWORD PTR _GetproAdd
	mov	DWORD PTR _VirtualFree, eax
; Line 693
	push	OFFSET $SG7969
	mov	ecx, DWORD PTR _kernel32
	push	ecx
	call	DWORD PTR _GetproAdd
	mov	DWORD PTR _OpenProcess, eax
; Line 694
	push	OFFSET $SG7970
	mov	edx, DWORD PTR _kernel32
	push	edx
	call	DWORD PTR _GetproAdd
	mov	DWORD PTR _CloseHandle, eax
; Line 695
	push	OFFSET $SG7971
	mov	eax, DWORD PTR _kernel32
	push	eax
	call	DWORD PTR _GetproAdd
	mov	DWORD PTR _CreateRemoteThread, eax
; Line 696
	push	OFFSET $SG7972
	mov	ecx, DWORD PTR _kernel32
	push	ecx
	call	DWORD PTR _GetproAdd
	mov	DWORD PTR _WaitForSingleObject, eax
$LN1@initFuncAd:
; Line 697
	pop	ebp
	ret	0
_initFuncAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = -4						; size = 4
_dllAddress$ = 8					; size = 4
_funcName$ = 12						; size = 4
_GetfunctionAddress PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 670
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 671
	mov	eax, DWORD PTR _dllAddress$[ebp]
	push	eax
	call	DWORD PTR _LoadLib
	mov	DWORD PTR _a$[ebp], eax
; Line 672
	mov	ecx, DWORD PTR _funcName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	DWORD PTR _GetproAdd
; Line 673
	mov	esp, ebp
	pop	ebp
	ret	0
_GetfunctionAddress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_exportDir$ = -44					; size = 8
_functionRVA$1 = -36					; size = 4
_pFunctions$ = -32					; size = 4
_pNameOrdinals$ = -28					; size = 4
_name$2 = -24						; size = 4
_pNames$ = -20						; size = 4
_pNtHeaders$ = -16					; size = 4
_pDosHeader$ = -12					; size = 4
_pExportDir$ = -8					; size = 4
_i$3 = -4						; size = 4
_hModule$ = 8						; size = 4
_funcName$ = 12						; size = 4
_GetProcAddressCustom PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
; Line 632
	mov	eax, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _pDosHeader$[ebp], eax
; Line 633
	mov	ecx, DWORD PTR _pDosHeader$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 23117				; 00005a4dH
	je	SHORT $LN5@GetProcAdd
; Line 634
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN5@GetProcAdd:
; Line 638
	mov	eax, DWORD PTR _pDosHeader$[ebp]
	mov	ecx, DWORD PTR _hModule$[ebp]
	add	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _pNtHeaders$[ebp], ecx
; Line 639
	mov	edx, DWORD PTR _pNtHeaders$[ebp]
	cmp	DWORD PTR [edx], 17744			; 00004550H
	je	SHORT $LN6@GetProcAdd
; Line 640
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN6@GetProcAdd:
; Line 644
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pNtHeaders$[ebp]
	mov	eax, DWORD PTR [edx+ecx+120]
	mov	ecx, DWORD PTR [edx+ecx+124]
	mov	DWORD PTR _exportDir$[ebp], eax
	mov	DWORD PTR _exportDir$[ebp+4], ecx
; Line 645
	cmp	DWORD PTR _exportDir$[ebp], 0
	jne	SHORT $LN7@GetProcAdd
; Line 646
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN7@GetProcAdd:
; Line 650
	mov	edx, DWORD PTR _hModule$[ebp]
	add	edx, DWORD PTR _exportDir$[ebp]
	mov	DWORD PTR _pExportDir$[ebp], edx
; Line 653
	mov	eax, DWORD PTR _pExportDir$[ebp]
	mov	ecx, DWORD PTR _hModule$[ebp]
	add	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _pNames$[ebp], ecx
; Line 654
	mov	edx, DWORD PTR _pExportDir$[ebp]
	mov	eax, DWORD PTR _hModule$[ebp]
	add	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _pNameOrdinals$[ebp], eax
; Line 655
	mov	ecx, DWORD PTR _pExportDir$[ebp]
	mov	edx, DWORD PTR _hModule$[ebp]
	add	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _pFunctions$[ebp], edx
; Line 658
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@GetProcAdd
$LN2@GetProcAdd:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@GetProcAdd:
	mov	ecx, DWORD PTR _pExportDir$[ebp]
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jae	SHORT $LN3@GetProcAdd
; Line 659
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _pNames$[ebp]
	mov	edx, DWORD PTR _hModule$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _name$2[ebp], edx
; Line 660
	mov	eax, DWORD PTR _funcName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$2[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@GetProcAdd
; Line 662
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR _pNameOrdinals$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _pFunctions$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _functionRVA$1[ebp], eax
; Line 663
	mov	eax, DWORD PTR _hModule$[ebp]
	add	eax, DWORD PTR _functionRVA$1[ebp]
	jmp	SHORT $LN1@GetProcAdd
$LN8@GetProcAdd:
; Line 665
	jmp	SHORT $LN2@GetProcAdd
$LN3@GetProcAdd:
; Line 667
	xor	eax, eax
$LN1@GetProcAdd:
; Line 668
	mov	esp, ebp
	pop	ebp
	ret	0
_GetProcAddressCustom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_kernel32$ = -4						; size = 4
_GetKernel32 PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 601
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 617
	push	eax
; Line 618
	mov	eax, DWORD PTR fs:48
; Line 619
	mov	eax, DWORD PTR [eax+12]
; Line 620
	mov	eax, DWORD PTR [eax+20]
; Line 621
	mov	eax, DWORD PTR [eax]
; Line 622
	mov	eax, DWORD PTR [eax]
; Line 623
	mov	eax, DWORD PTR [eax+16]
; Line 624
	mov	DWORD PTR _kernel32$[ebp], eax
; Line 625
	pop	eax
; Line 627
	mov	eax, DWORD PTR _kernel32$[ebp]
; Line 628
	mov	esp, ebp
	pop	ebp
	ret	0
_GetKernel32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_buff_c$ = -76						; size = 30
_b_double$ = -44					; size = 8
_b_float$ = -36						; size = 4
_str_len$ = -32						; size = 4
_b_int$ = -28						; size = 4
_buff$ = -24						; size = 4
_arg_num$ = -20						; size = 4
_b_uint$ = -16						; size = 4
_arg_index$ = -12					; size = 4
_i$1 = -8						; size = 4
_index$ = -4						; size = 4
_format$ = 8						; size = 4
_Printf	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
; Line 480
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _str_len$[ebp], eax
; Line 482
	mov	DWORD PTR _arg_num$[ebp], 2
; Line 484
	mov	DWORD PTR _index$[ebp], 0
; Line 486
	mov	DWORD PTR _arg_index$[ebp], 0
; Line 489
	mov	ecx, DWORD PTR _EPI
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _buff$[ebp], edx
; Line 491
	xor	eax, eax
	mov	DWORD PTR _buff_c$[ebp], eax
	mov	DWORD PTR _buff_c$[ebp+4], eax
	mov	DWORD PTR _buff_c$[ebp+8], eax
	mov	DWORD PTR _buff_c$[ebp+12], eax
	mov	DWORD PTR _buff_c$[ebp+16], eax
	mov	DWORD PTR _buff_c$[ebp+20], eax
	mov	DWORD PTR _buff_c$[ebp+24], eax
	mov	WORD PTR _buff_c$[ebp+28], ax
; Line 493
	mov	DWORD PTR _b_int$[ebp], 0
; Line 494
	mov	DWORD PTR _b_uint$[ebp], 0
; Line 495
	xorps	xmm0, xmm0
	movss	DWORD PTR _b_float$[ebp], xmm0
; Line 496
	xorps	xmm0, xmm0
	movsd	QWORD PTR _b_double$[ebp], xmm0
; Line 498
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Printf
$LN2@Printf:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@Printf:
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR _str_len$[ebp]
	jae	$LN3@Printf
; Line 499
	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 37					; 00000025H
	jne	$LN14@Printf
; Line 500
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
; Line 501
	mov	eax, DWORD PTR _arg_num$[ebp]
	add	eax, 1
	mov	DWORD PTR _arg_num$[ebp], eax
; Line 502
	mov	ecx, DWORD PTR _format$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 100				; 00000064H
	jne	SHORT $LN6@Printf
; Line 503
	mov	eax, DWORD PTR _arg_num$[ebp]
	shl	eax, 2
	mov	DWORD PTR _arg_index$[ebp], eax
; Line 505
	push	eax
; Line 506
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 507
	add	eax, ebp
; Line 508
	mov	eax, DWORD PTR [eax]
; Line 509
	mov	DWORD PTR _b_int$[ebp], eax
; Line 510
	pop	eax
; Line 512
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b_int$[ebp]
	push	edx
	call	_intToStr
	add	esp, 8
; Line 513
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 514
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 515
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	call	_memzero
	add	esp, 8
; Line 516
	jmp	$LN2@Printf
; Line 517
	jmp	$LN14@Printf
$LN6@Printf:
; Line 518
	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN8@Printf
; Line 519
	mov	ecx, DWORD PTR _arg_num$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _arg_index$[ebp], ecx
; Line 521
	push	eax
; Line 522
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 523
	add	eax, ebp
; Line 524
	mov	eax, DWORD PTR [eax]
; Line 525
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 526
	pop	eax
; Line 528
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	mov	eax, DWORD PTR _b_uint$[ebp]
	push	eax
	call	_unsignedIntToStr
	add	esp, 8
; Line 529
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	mov	eax, DWORD PTR _buff$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 530
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 531
	push	30					; 0000001eH
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	call	_memzero
	add	esp, 8
; Line 532
	jmp	$LN2@Printf
; Line 533
	jmp	$LN14@Printf
$LN8@Printf:
; Line 534
	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN10@Printf
; Line 535
	mov	edx, DWORD PTR _arg_num$[ebp]
	shl	edx, 2
	mov	DWORD PTR _arg_index$[ebp], edx
; Line 537
	push	eax
; Line 538
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 539
	add	eax, ebp
; Line 540
	mov	eax, DWORD PTR [eax]
; Line 541
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 542
	pop	eax
; Line 544
	mov	eax, DWORD PTR _buff$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	mov	cl, BYTE PTR _b_uint$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
; Line 545
	jmp	$LN2@Printf
; Line 546
	jmp	$LN14@Printf
$LN10@Printf:
; Line 547
	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN12@Printf
; Line 548
	mov	edx, DWORD PTR _arg_num$[ebp]
	shl	edx, 2
	mov	DWORD PTR _arg_index$[ebp], edx
; Line 550
	push	eax
; Line 551
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 552
	add	eax, ebp
; Line 553
	mov	eax, DWORD PTR [eax]
; Line 554
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 555
	pop	eax
; Line 557
	mov	eax, DWORD PTR _b_uint$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _b_uint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 558
	mov	eax, DWORD PTR _b_uint$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 559
	jmp	$LN2@Printf
; Line 560
	jmp	SHORT $LN14@Printf
$LN12@Printf:
; Line 561
	mov	ecx, DWORD PTR _format$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 112				; 00000070H
	jne	SHORT $LN14@Printf
; Line 562
	mov	eax, DWORD PTR _arg_num$[ebp]
	shl	eax, 2
	mov	DWORD PTR _arg_index$[ebp], eax
; Line 564
	push	eax
; Line 565
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 566
	add	eax, ebp
; Line 567
	mov	eax, DWORD PTR [eax]
; Line 568
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 569
	pop	eax
; Line 571
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b_uint$[ebp]
	push	edx
	call	_decimalToHexadecimal
	add	esp, 8
; Line 572
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 573
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 574
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	call	_memzero
	add	esp, 8
; Line 575
	jmp	$LN2@Printf
$LN14@Printf:
; Line 579
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
; Line 580
	jmp	$LN2@Printf
$LN3@Printf:
; Line 591
	call	_callEPrintFunc
; Line 596
	mov	esp, ebp
	pop	ebp
	ret	0
_Printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_buff_c$ = -76						; size = 30
_b_double$ = -44					; size = 8
_b_float$ = -36						; size = 4
_str_len$ = -32						; size = 4
_b_int$ = -28						; size = 4
_buff$ = -24						; size = 4
_arg_num$ = -20						; size = 4
_b_uint$ = -16						; size = 4
_arg_index$ = -12					; size = 4
_i$1 = -8						; size = 4
_index$ = -4						; size = 4
_str$ = 8						; size = 4
_format$ = 12						; size = 4
_sprintf PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 371
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
; Line 373
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _str_len$[ebp], eax
; Line 375
	mov	DWORD PTR _arg_num$[ebp], 3
; Line 377
	mov	DWORD PTR _index$[ebp], 0
; Line 379
	mov	DWORD PTR _arg_index$[ebp], 0
; Line 382
	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR _buff$[ebp], ecx
; Line 384
	xor	edx, edx
	mov	DWORD PTR _buff_c$[ebp], edx
	mov	DWORD PTR _buff_c$[ebp+4], edx
	mov	DWORD PTR _buff_c$[ebp+8], edx
	mov	DWORD PTR _buff_c$[ebp+12], edx
	mov	DWORD PTR _buff_c$[ebp+16], edx
	mov	DWORD PTR _buff_c$[ebp+20], edx
	mov	DWORD PTR _buff_c$[ebp+24], edx
	mov	WORD PTR _buff_c$[ebp+28], dx
; Line 386
	mov	DWORD PTR _b_int$[ebp], 0
; Line 387
	mov	DWORD PTR _b_uint$[ebp], 0
; Line 388
	xorps	xmm0, xmm0
	movss	DWORD PTR _b_float$[ebp], xmm0
; Line 389
	xorps	xmm0, xmm0
	movsd	QWORD PTR _b_double$[ebp], xmm0
; Line 391
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@sprintf
$LN2@sprintf:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@sprintf:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _str_len$[ebp]
	jae	$LN3@sprintf
; Line 392
	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 37					; 00000025H
	jne	$LN14@sprintf
; Line 393
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
; Line 394
	mov	edx, DWORD PTR _arg_num$[ebp]
	add	edx, 1
	mov	DWORD PTR _arg_num$[ebp], edx
; Line 395
	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN6@sprintf
; Line 396
	mov	edx, DWORD PTR _arg_num$[ebp]
	shl	edx, 2
	mov	DWORD PTR _arg_index$[ebp], edx
; Line 398
	push	eax
; Line 399
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 400
	add	eax, ebp
; Line 401
	mov	eax, DWORD PTR [eax]
; Line 402
	mov	DWORD PTR _b_int$[ebp], eax
; Line 403
	pop	eax
; Line 405
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b_int$[ebp]
	push	ecx
	call	_intToStr
	add	esp, 8
; Line 406
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 407
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 408
	push	30					; 0000001eH
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_memzero
	add	esp, 8
; Line 409
	jmp	$LN2@sprintf
; Line 410
	jmp	$LN14@sprintf
$LN6@sprintf:
; Line 411
	mov	ecx, DWORD PTR _format$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 117				; 00000075H
	jne	SHORT $LN8@sprintf
; Line 412
	mov	eax, DWORD PTR _arg_num$[ebp]
	shl	eax, 2
	mov	DWORD PTR _arg_index$[ebp], eax
; Line 414
	push	eax
; Line 415
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 416
	add	eax, ebp
; Line 417
	mov	eax, DWORD PTR [eax]
; Line 418
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 419
	pop	eax
; Line 421
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b_uint$[ebp]
	push	edx
	call	_unsignedIntToStr
	add	esp, 8
; Line 422
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 423
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 424
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _buff_c$[ebp]
	push	ecx
	call	_memzero
	add	esp, 8
; Line 425
	jmp	$LN2@sprintf
; Line 426
	jmp	$LN14@sprintf
$LN8@sprintf:
; Line 427
	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN10@sprintf
; Line 428
	mov	ecx, DWORD PTR _arg_num$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _arg_index$[ebp], ecx
; Line 430
	push	eax
; Line 431
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 432
	add	eax, ebp
; Line 433
	mov	eax, DWORD PTR [eax]
; Line 434
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 435
	pop	eax
; Line 437
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _index$[ebp]
	mov	al, BYTE PTR _b_uint$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
; Line 438
	jmp	$LN2@sprintf
; Line 439
	jmp	$LN14@sprintf
$LN10@sprintf:
; Line 440
	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN12@sprintf
; Line 441
	mov	ecx, DWORD PTR _arg_num$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _arg_index$[ebp], ecx
; Line 443
	push	eax
; Line 444
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 445
	add	eax, ebp
; Line 446
	mov	eax, DWORD PTR [eax]
; Line 447
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 448
	pop	eax
; Line 450
	mov	edx, DWORD PTR _b_uint$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _b_uint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 451
	mov	edx, DWORD PTR _b_uint$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 452
	jmp	$LN2@sprintf
; Line 453
	jmp	SHORT $LN14@sprintf
$LN12@sprintf:
; Line 454
	mov	eax, DWORD PTR _format$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 112				; 00000070H
	jne	SHORT $LN14@sprintf
; Line 455
	mov	edx, DWORD PTR _arg_num$[ebp]
	shl	edx, 2
	mov	DWORD PTR _arg_index$[ebp], edx
; Line 457
	push	eax
; Line 458
	mov	eax, DWORD PTR _arg_index$[ebp]
; Line 459
	add	eax, ebp
; Line 460
	mov	eax, DWORD PTR [eax]
; Line 461
	mov	DWORD PTR _b_uint$[ebp], eax
; Line 462
	pop	eax
; Line 464
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b_uint$[ebp]
	push	ecx
	call	_decimalToHexadecimal
	add	esp, 8
; Line 465
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 466
	lea	edx, DWORD PTR _buff_c$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 467
	push	30					; 0000001eH
	lea	eax, DWORD PTR _buff_c$[ebp]
	push	eax
	call	_memzero
	add	esp, 8
; Line 468
	jmp	$LN2@sprintf
$LN14@sprintf:
; Line 472
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _format$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
; Line 473
	jmp	$LN2@sprintf
$LN3@sprintf:
; Line 474
	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_format$ = 8						; size = 4
_prin	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 365
	push	ebp
	mov	ebp, esp
; Line 366
	mov	eax, DWORD PTR _EPI
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 66			; 00000042H
; Line 368
	call	_callEPrintFunc
; Line 369
	pop	ebp
	ret	0
_prin	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_s$ = -16						; size = 4
_d$ = -12						; size = 4
_str_len$ = -8						; size = 4
_i$1 = -4						; size = 4
_format$ = 8						; size = 4
_EPrintString PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 354
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 355
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _str_len$[ebp], eax
; Line 356
	mov	ecx, DWORD PTR _EPI
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _d$[ebp], edx
; Line 357
	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 360
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@EPrintStri
$LN2@EPrintStri:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@EPrintStri:
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR _str_len$[ebp]
	jae	SHORT $LN3@EPrintStri
; Line 361
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 362
	jmp	SHORT $LN2@EPrintStri
$LN3@EPrintStri:
; Line 363
	call	_callEPrintFunc
; Line 364
	mov	esp, ebp
	pop	ebp
	ret	0
_EPrintString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hThread$ = -8						; size = 4
_hProcess$ = -4						; size = 4
_callEPrintFunc PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 339
	mov	eax, DWORD PTR _EPI
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	push	2035711					; 001f0fffH
	call	DWORD PTR _OpenProcess
	mov	DWORD PTR _hProcess$[ebp], eax
; Line 340
	cmp	DWORD PTR _hProcess$[ebp], 0
	jne	SHORT $LN2@callEPrint
; Line 341
	xor	al, al
	jmp	SHORT $LN1@callEPrint
$LN2@callEPrint:
; Line 343
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _EPI
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _hProcess$[ebp]
	push	ecx
	call	DWORD PTR _CreateRemoteThread
	mov	DWORD PTR _hThread$[ebp], eax
; Line 344
	cmp	DWORD PTR _hThread$[ebp], 0
	jne	SHORT $LN3@callEPrint
; Line 345
	mov	edx, DWORD PTR _hProcess$[ebp]
	push	edx
	call	DWORD PTR _CloseHandle
; Line 346
	xor	al, al
	jmp	SHORT $LN1@callEPrint
$LN3@callEPrint:
; Line 348
	push	-1
	mov	eax, DWORD PTR _hThread$[ebp]
	push	eax
	call	DWORD PTR _WaitForSingleObject
; Line 349
	mov	ecx, DWORD PTR _hProcess$[ebp]
	push	ecx
	call	DWORD PTR _CloseHandle
; Line 350
	mov	edx, DWORD PTR _hThread$[ebp]
	push	edx
	call	DWORD PTR _CloseHandle
; Line 351
	mov	al, 1
$LN1@callEPrint:
; Line 352
	mov	esp, ebp
	pop	ebp
	ret	0
_callEPrintFunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
_strcmp	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 326
	push	ebp
	mov	ebp, esp
$LN2@strcmp:
; Line 328
	mov	eax, DWORD PTR _str1$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@strcmp
	mov	edx, DWORD PTR _str2$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@strcmp
	mov	ecx, DWORD PTR _str1$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _str2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN3@strcmp
; Line 329
	mov	edx, DWORD PTR _str1$[ebp]
	add	edx, 1
	mov	DWORD PTR _str1$[ebp], edx
; Line 330
	mov	eax, DWORD PTR _str2$[ebp]
	add	eax, 1
	mov	DWORD PTR _str2$[ebp], eax
; Line 331
	jmp	SHORT $LN2@strcmp
$LN3@strcmp:
; Line 334
	mov	ecx, DWORD PTR _str1$[ebp]
	movzx	eax, BYTE PTR [ecx]
	mov	edx, DWORD PTR _str2$[ebp]
	movzx	ecx, BYTE PTR [edx]
	sub	eax, ecx
; Line 335
	pop	ebp
	ret	0
_strcmp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hexDigits$ = -52					; size = 17
_remainder$1 = -32					; size = 4
_j$2 = -28						; size = 4
_len$ = -24						; size = 4
_j$3 = -20						; size = 4
_end$ = -16						; size = 4
_start$ = -12						; size = 4
_i$ = -8						; size = 4
_temp$4 = -1						; size = 1
_decimal$ = 8						; size = 4
_hexString$ = 12					; size = 4
_decimalToHexadecimal PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
; Line 281
	mov	eax, DWORD PTR $SG7780
	mov	DWORD PTR _hexDigits$[ebp], eax
	mov	ecx, DWORD PTR $SG7780+4
	mov	DWORD PTR _hexDigits$[ebp+4], ecx
	mov	edx, DWORD PTR $SG7780+8
	mov	DWORD PTR _hexDigits$[ebp+8], edx
	mov	eax, DWORD PTR $SG7780+12
	mov	DWORD PTR _hexDigits$[ebp+12], eax
	mov	cl, BYTE PTR $SG7780+16
	mov	BYTE PTR _hexDigits$[ebp+16], cl
; Line 282
	mov	DWORD PTR _i$[ebp], 0
; Line 285
	cmp	DWORD PTR _decimal$[ebp], 0
	jne	SHORT $LN2@decimalToH
; Line 286
	mov	edx, DWORD PTR _hexString$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 48			; 00000030H
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _hexString$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	jmp	$LN1@decimalToH
$LN2@decimalToH:
; Line 292
	cmp	DWORD PTR _decimal$[ebp], 0
	jle	SHORT $LN3@decimalToH
; Line 293
	mov	edx, DWORD PTR _decimal$[ebp]
	and	edx, -2147483633			; 8000000fH
	jns	SHORT $LN15@decimalToH
	dec	edx
	or	edx, -16				; fffffff0H
	inc	edx
$LN15@decimalToH:
	mov	DWORD PTR _remainder$1[ebp], edx
; Line 294
	mov	eax, DWORD PTR _hexString$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _remainder$1[ebp]
	mov	dl, BYTE PTR _hexDigits$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 295
	mov	eax, DWORD PTR _decimal$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _decimal$[ebp], eax
; Line 296
	jmp	SHORT $LN2@decimalToH
$LN3@decimalToH:
; Line 298
	mov	ecx, DWORD PTR _hexString$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 301
	mov	DWORD PTR _start$[ebp], 0
; Line 302
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx
$LN4@decimalToH:
; Line 303
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN5@decimalToH
; Line 304
	mov	ecx, DWORD PTR _hexString$[ebp]
	add	ecx, DWORD PTR _start$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _temp$4[ebp], dl
; Line 305
	mov	eax, DWORD PTR _hexString$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _hexString$[ebp]
	add	ecx, DWORD PTR _end$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 306
	mov	eax, DWORD PTR _hexString$[ebp]
	add	eax, DWORD PTR _end$[ebp]
	mov	cl, BYTE PTR _temp$4[ebp]
	mov	BYTE PTR [eax], cl
; Line 307
	mov	edx, DWORD PTR _start$[ebp]
	add	edx, 1
	mov	DWORD PTR _start$[ebp], edx
; Line 308
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 309
	jmp	SHORT $LN4@decimalToH
$LN5@decimalToH:
; Line 312
	mov	ecx, DWORD PTR _hexString$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 313
	cmp	DWORD PTR _len$[ebp], 8
	jge	SHORT $LN1@decimalToH
; Line 315
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _j$3[ebp], edx
	jmp	SHORT $LN8@decimalToH
$LN6@decimalToH:
	mov	eax, DWORD PTR _j$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN8@decimalToH:
	cmp	DWORD PTR _j$3[ebp], 0
	jl	SHORT $LN7@decimalToH
; Line 316
	mov	ecx, 8
	sub	ecx, DWORD PTR _len$[ebp]
	add	ecx, DWORD PTR _j$3[ebp]
	mov	edx, DWORD PTR _hexString$[ebp]
	add	edx, DWORD PTR _j$3[ebp]
	mov	eax, DWORD PTR _hexString$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [eax+ecx], dl
; Line 317
	jmp	SHORT $LN6@decimalToH
$LN7@decimalToH:
; Line 319
	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN11@decimalToH
$LN9@decimalToH:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN11@decimalToH:
	mov	ecx, 8
	sub	ecx, DWORD PTR _len$[ebp]
	cmp	DWORD PTR _j$2[ebp], ecx
	jge	SHORT $LN1@decimalToH
; Line 320
	mov	edx, DWORD PTR _hexString$[ebp]
	add	edx, DWORD PTR _j$2[ebp]
	mov	BYTE PTR [edx], 48			; 00000030H
; Line 321
	jmp	SHORT $LN9@decimalToH
$LN1@decimalToH:
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
_decimalToHexadecimal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_intStr$ = -44						; size = 20
_fracInt$1 = -24					; size = 4
_i$2 = -20						; size = 4
_j$3 = -16						; size = 4
_fracPart$ = -12					; size = 4
_intPart$ = -8						; size = 4
_i$ = -4						; size = 4
_num$ = 8						; size = 4
_str$ = 12						; size = 4
_precision$ = 16					; size = 4
_floatToStr PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
; Line 238
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _num$[ebp]
	jbe	SHORT $LN10@floatToStr
; Line 239
	mov	eax, DWORD PTR _str$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$[ebp], ecx
; Line 240
	movss	xmm0, DWORD PTR _num$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _num$[ebp], xmm0
$LN10@floatToStr:
; Line 244
	cvttss2si edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR _intPart$[ebp], edx
; Line 245
	cvtsi2ss xmm0, DWORD PTR _intPart$[ebp]
	movss	xmm1, DWORD PTR _num$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _fracPart$[ebp], xmm1
; Line 249
	mov	DWORD PTR _i$[ebp], 0
; Line 250
	cmp	DWORD PTR _intPart$[ebp], 0
	jne	SHORT $LN11@floatToStr
; Line 251
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _intStr$[ebp+eax], 48		; 00000030H
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 252
	jmp	SHORT $LN3@floatToStr
$LN11@floatToStr:
; Line 254
	cmp	DWORD PTR _intPart$[ebp], 0
	jle	SHORT $LN3@floatToStr
; Line 255
	mov	eax, DWORD PTR _intPart$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _intStr$[ebp+eax], dl
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 256
	mov	eax, DWORD PTR _intPart$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _intPart$[ebp], eax
; Line 257
	jmp	SHORT $LN11@floatToStr
$LN3@floatToStr:
; Line 259
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _intStr$[ebp+edx], 0
; Line 262
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
	jmp	SHORT $LN6@floatToStr
$LN4@floatToStr:
	mov	ecx, DWORD PTR _j$3[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN6@floatToStr:
	cmp	DWORD PTR _j$3[ebp], 0
	jl	SHORT $LN5@floatToStr
; Line 263
	mov	edx, DWORD PTR _str$[ebp]
	mov	eax, DWORD PTR _j$3[ebp]
	mov	cl, BYTE PTR _intStr$[ebp+eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx
; Line 264
	jmp	SHORT $LN4@floatToStr
$LN5@floatToStr:
; Line 267
	cmp	DWORD PTR _precision$[ebp], 0
	jle	SHORT $LN8@floatToStr
; Line 268
	mov	eax, DWORD PTR _str$[ebp]
	mov	BYTE PTR [eax], 46			; 0000002eH
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$[ebp], ecx
; Line 269
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@floatToStr
$LN7@floatToStr:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN9@floatToStr:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _precision$[ebp]
	jge	SHORT $LN8@floatToStr
; Line 270
	movss	xmm0, DWORD PTR _fracPart$[ebp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _fracPart$[ebp], xmm0
; Line 271
	cvttss2si ecx, DWORD PTR _fracPart$[ebp]
	mov	DWORD PTR _fracInt$1[ebp], ecx
; Line 272
	mov	edx, DWORD PTR _fracInt$1[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _str$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$[ebp], ecx
; Line 273
	cvtsi2ss xmm0, DWORD PTR _fracInt$1[ebp]
	movss	xmm1, DWORD PTR _fracPart$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _fracPart$[ebp], xmm1
; Line 274
	jmp	SHORT $LN7@floatToStr
$LN8@floatToStr:
; Line 277
	mov	edx, DWORD PTR _str$[ebp]
	mov	BYTE PTR [edx], 0
; Line 278
	mov	esp, ebp
	pop	ebp
	ret	0
_floatToStr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_i$ = -4						; size = 4
_num$ = 8						; size = 4
_str$ = 12						; size = 4
_unsignedIntToStr PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 217
	mov	DWORD PTR _i$[ebp], 0
; Line 218
	cmp	DWORD PTR _num$[ebp], 0
	jne	SHORT $LN6@unsignedIn
; Line 219
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 220
	jmp	SHORT $LN1@unsignedIn
$LN6@unsignedIn:
; Line 223
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR _temp$1[ebp], edx
$LN2@unsignedIn:
; Line 224
	cmp	DWORD PTR _temp$1[ebp], 0
	jbe	SHORT $LN3@unsignedIn
; Line 225
	mov	eax, DWORD PTR _temp$1[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _temp$1[ebp], eax
; Line 226
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 227
	jmp	SHORT $LN2@unsignedIn
$LN3@unsignedIn:
; Line 228
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
$LN4@unsignedIn:
; Line 229
	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN1@unsignedIn
; Line 230
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _num$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
; Line 231
	mov	eax, DWORD PTR _num$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _num$[ebp], eax
; Line 232
	jmp	SHORT $LN4@unsignedIn
$LN1@unsignedIn:
; Line 234
	mov	esp, ebp
	pop	ebp
	ret	0
_unsignedIntToStr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_isNegative$ = -20					; size = 4
_end$ = -16						; size = 4
_start$ = -12						; size = 4
_i$ = -8						; size = 4
_temp$1 = -1						; size = 1
_num$ = 8						; size = 4
_str$ = 12						; size = 4
_intToStr PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 182
	mov	DWORD PTR _i$[ebp], 0
; Line 183
	mov	DWORD PTR _isNegative$[ebp], 0
; Line 186
	cmp	DWORD PTR _num$[ebp], 0
	jge	SHORT $LN4@intToStr
; Line 187
	mov	DWORD PTR _isNegative$[ebp], 1
; Line 188
	mov	eax, DWORD PTR _num$[ebp]
	neg	eax
	mov	DWORD PTR _num$[ebp], eax
$LN4@intToStr:
; Line 193
	mov	eax, DWORD PTR _num$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 194
	mov	eax, DWORD PTR _num$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _num$[ebp], eax
; Line 195
	cmp	DWORD PTR _num$[ebp], 0
	jne	SHORT $LN4@intToStr
; Line 198
	cmp	DWORD PTR _isNegative$[ebp], 0
	je	SHORT $LN8@intToStr
; Line 199
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 45			; 0000002dH
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@intToStr:
; Line 202
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 205
	mov	DWORD PTR _start$[ebp], 0
; Line 206
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx
$LN5@intToStr:
; Line 207
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN1@intToStr
; Line 208
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _start$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _temp$1[ebp], dl
; Line 209
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _end$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 210
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _end$[ebp]
	mov	cl, BYTE PTR _temp$1[ebp]
	mov	BYTE PTR [eax], cl
; Line 211
	mov	edx, DWORD PTR _start$[ebp]
	add	edx, 1
	mov	DWORD PTR _start$[ebp], edx
; Line 212
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 213
	jmp	SHORT $LN5@intToStr
$LN1@intToStr:
; Line 214
	mov	esp, ebp
	pop	ebp
	ret	0
_intToStr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_s$ = -12						; size = 4
_d$ = -8						; size = 4
_i$1 = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_memcpy	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 170
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _s$[ebp], ecx
; Line 174
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@memcpy
$LN2@memcpy:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@memcpy:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN3@memcpy
; Line 175
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
; Line 176
	jmp	SHORT $LN2@memcpy
$LN3@memcpy:
; Line 178
	mov	eax, DWORD PTR _dest$[ebp]
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	0
_memcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_temp$ = -4						; size = 4
_str$ = 8						; size = 4
_strlen	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 158
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _temp$[ebp], eax
; Line 159
	mov	DWORD PTR _i$[ebp], 0
$LN2@strlen:
; Line 160
	mov	ecx, DWORD PTR _temp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@strlen
; Line 161
	mov	eax, DWORD PTR _temp$[ebp]
	add	eax, 1
	mov	DWORD PTR _temp$[ebp], eax
; Line 162
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 163
	jmp	SHORT $LN2@strlen
$LN3@strlen:
; Line 164
	mov	eax, DWORD PTR _i$[ebp]
; Line 165
	mov	esp, ebp
	pop	ebp
	ret	0
_strlen	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_p$ = -8						; size = 4
_i$1 = -4						; size = 4
_ptr$ = 8						; size = 4
_size$ = 12						; size = 4
_memzero PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 151
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 152
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@memzero
$LN2@memzero:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@memzero:
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memzero
; Line 153
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [eax], 0
; Line 154
	jmp	SHORT $LN2@memzero
$LN1@memzero:
; Line 155
	mov	esp, ebp
	pop	ebp
	ret	0
_memzero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_address$ = 8						; size = 4
_free_	PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 147
	push	ebp
	mov	ebp, esp
; Line 148
	push	32768					; 00008000H
	push	0
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	DWORD PTR _VirtualFree
; Line 149
	pop	ebp
	ret	0
_free_	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size$ = 8						; size = 4
_malloc_ PROC
; File C:\Users\86134\OneDrive\桌面\c代码注入器\bin\std.h
; Line 143
	push	ebp
	mov	ebp, esp
; Line 144
	push	64					; 00000040H
	push	4096					; 00001000H
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	call	DWORD PTR _VirtualAlloc
; Line 145
	pop	ebp
	ret	0
_malloc_ ENDP
_TEXT	ENDS
END
